// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns user information based on their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Retrieve user by ID",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/dto.Account"
                        }
                    },
                    "404": {
                        "description": "This user wasn` + "`" + `t found.",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/auth/login": {
            "post": {
                "description": "Logs in a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "Login information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "400": {
                        "description": "Incorrect data",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "401": {
                        "description": "Incorrect email or password",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "404": {
                        "description": "This user wasn't found.",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/auth/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Logs out a user by invalidating the session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log out a user",
                "responses": {
                    "200": {
                        "description": "Logout success.",
                        "schema": {
                            "$ref": "#/definitions/dto.Message"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/auth/refresh": {
            "get": {
                "description": "Refreshes the user's tokens using the refresh token from the cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh user tokens",
                "responses": {
                    "200": {
                        "description": "Refresh token",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Token is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "404": {
                        "description": "Your token wasn't found., This user wasn't found.",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/delete": {
            "delete": {
                "description": "Deletes a user account by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Delete user account",
                "parameters": [
                    {
                        "description": "Delete User Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/dto.Message"
                        }
                    },
                    "400": {
                        "description": "Incorrect data",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "401": {
                        "description": "Authorization header wasn` + "`" + `t found, Token is not bearer",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "403": {
                        "description": "This resource is forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/edit": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the user's information including password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "description": "User update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated.",
                        "schema": {
                            "$ref": "#/definitions/dto.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "401": {
                        "description": "Authorization header wasn't found, Token is not bearer",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "403": {
                        "description": "This resource is forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "404": {
                        "description": "This user wasn't found",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "409": {
                        "description": "User with this email already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/new": {
            "post": {
                "description": "Creates a new user and returns access tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "Data for creating a user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with token",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "400": {
                        "description": "Incorrect data",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "403": {
                        "description": "Incorrect password",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "409": {
                        "description": "User with this email already exist",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/verify/confirm/{code}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verifies the provided activation code for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Verify user activation code",
                "parameters": [
                    {
                        "maxLength": 50,
                        "minLength": 8,
                        "type": "string",
                        "description": "Activation Code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verified.",
                        "schema": {
                            "$ref": "#/definitions/dto.Message"
                        }
                    },
                    "400": {
                        "description": "Your activation code is wrong., Bad string length",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "401": {
                        "description": "Authorization header wasn` + "`" + `t found, Token is not bearer",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "403": {
                        "description": "This resource is forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "404": {
                        "description": "This code wasn` + "`" + `t found.",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        },
        "/account/verify/resend": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Resends a verification code to the user's email or phone number.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Resend verification code",
                "responses": {
                    "200": {
                        "description": "Ok.",
                        "schema": {
                            "$ref": "#/definitions/dto.Message"
                        }
                    },
                    "400": {
                        "description": "Incorrect data",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "403": {
                        "description": "This resource is forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    },
                    "500": {
                        "description": "Something going wrong...",
                        "schema": {
                            "$ref": "#/definitions/dto.JsonError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Account": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUser": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 200,
                    "minimum": 0
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8
                }
            }
        },
        "dto.DeleteUser": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8
                }
            }
        },
        "dto.JsonError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dto.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8
                }
            }
        },
        "dto.Message": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.Token": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUser": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 200,
                    "minimum": 0
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "oldPassword": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
