definitions:
  dto.Account:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      verified:
        type: boolean
    type: object
  dto.CreateUser:
    properties:
      age:
        maximum: 200
        minimum: 0
        type: integer
      email:
        type: string
      name:
        minLength: 1
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SetRole:
    properties:
      role:
        enum:
        - USER
        - ADMIN
        type: string
      user_id:
        type: integer
    required:
    - role
    - user_id
    type: object
  dto.Token:
    properties:
      token:
        type: string
    type: object
  dto.UpdateUser:
    properties:
      age:
        maximum: 200
        minimum: 0
        type: integer
      email:
        type: string
      name:
        minLength: 1
        type: string
      old_password:
        maxLength: 50
        minLength: 8
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
    required:
    - age
    - email
    - name
    type: object
  resp.JsonError:
    properties:
      error:
        type: string
    type: object
  resp.Message:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /account:
    get:
      consumes:
      - application/json
      description: Returns user information.
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/dto.Account'
        "401":
          description: Authorization header wasn't found, Token is not bearer
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: This user wasn`t found.
          schema:
            $ref: '#/definitions/resp.JsonError'
      security:
      - Bearer: []
      summary: Retrieve user own account
      tags:
      - Account
  /account/auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with email and password
      parameters:
      - description: Login information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: Access token
          schema:
            $ref: '#/definitions/dto.Token'
        "400":
          description: Incorrect data
          schema:
            $ref: '#/definitions/resp.JsonError'
        "401":
          description: Incorrect email or password
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: This user wasn't found.
          schema:
            $ref: '#/definitions/resp.JsonError'
      summary: Log in a user
      tags:
      - Auth
  /account/auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by delete the session
      produces:
      - application/json
      responses:
        "200":
          description: Logout success.
          schema:
            $ref: '#/definitions/resp.Message'
      security:
      - Bearer: []
      summary: Log out a user
      tags:
      - Auth
  /account/auth/refresh:
    get:
      consumes:
      - application/json
      description: Refreshes the user's tokens using the refresh token from the cookie
      produces:
      - application/json
      responses:
        "200":
          description: Refresh token
          schema:
            $ref: '#/definitions/dto.Token'
        "401":
          description: Token is invalid
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: Your token wasn't found., This user wasn't found.
          schema:
            $ref: '#/definitions/resp.JsonError'
      summary: Refresh user tokens
      tags:
      - Auth
  /account/delete:
    delete:
      consumes:
      - application/json
      description: Deletes a user account.
      produces:
      - application/json
      responses:
        "200":
          description: Ok.
          schema:
            $ref: '#/definitions/resp.Message'
        "401":
          description: Authorization header wasn`t found, Token is not bearer
          schema:
            $ref: '#/definitions/resp.JsonError'
      security:
      - Bearer: []
      summary: Delete user account
      tags:
      - Account
  /account/edit:
    put:
      consumes:
      - application/json
      description: Updates the user's information including password.
      parameters:
      - description: User update data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Updated.
          schema:
            $ref: '#/definitions/resp.Message'
        "400":
          description: Incorrect data.
          schema:
            $ref: '#/definitions/resp.JsonError'
        "401":
          description: Authorization header wasn't found, Token is not bearer
          schema:
            $ref: '#/definitions/resp.JsonError'
        "403":
          description: This resource is forbidden
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: This user wasn't found
          schema:
            $ref: '#/definitions/resp.JsonError'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/resp.JsonError'
      security:
      - Bearer: []
      summary: Update user information
      tags:
      - Account
  /account/edit/role:
    patch:
      consumes:
      - application/json
      description: Updates the user's role. Available only for ADMIN
      parameters:
      - description: User set role data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SetRole'
      produces:
      - application/json
      responses:
        "200":
          description: Updated.
          schema:
            $ref: '#/definitions/resp.Message'
        "400":
          description: Incorrect data.
          schema:
            $ref: '#/definitions/resp.JsonError'
        "401":
          description: Authorization header wasn't found, Token is not bearer
          schema:
            $ref: '#/definitions/resp.JsonError'
        "403":
          description: This resource is forbidden
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: This user wasn't found
          schema:
            $ref: '#/definitions/resp.JsonError'
      security:
      - Bearer: []
      summary: Update user role
      tags:
      - Account
  /account/new:
    post:
      consumes:
      - application/json
      description: Creates a new account and returns access tokens.
      parameters:
      - description: Data for creating a user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with token
          schema:
            $ref: '#/definitions/dto.Token'
        "400":
          description: Incorrect data
          schema:
            $ref: '#/definitions/resp.JsonError'
        "403":
          description: Incorrect password
          schema:
            $ref: '#/definitions/resp.JsonError'
        "409":
          description: User with this email already exist
          schema:
            $ref: '#/definitions/resp.JsonError'
      summary: Create account
      tags:
      - Account
  /account/verify/confirm/{code}:
    post:
      consumes:
      - application/json
      description: Verifies user with the provided activation code.
      parameters:
      - description: Activation Code
        in: path
        maxLength: 6
        minLength: 6
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Verified.
          schema:
            $ref: '#/definitions/resp.Message'
        "400":
          description: Your activation code is wrong., Bad string length
          schema:
            $ref: '#/definitions/resp.JsonError'
        "401":
          description: Authorization header wasn`t found, Token is not bearer
          schema:
            $ref: '#/definitions/resp.JsonError'
        "403":
          description: This resource is forbidden
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: This code wasn`t found.
          schema:
            $ref: '#/definitions/resp.JsonError'
      security:
      - Bearer: []
      summary: Verify user
      tags:
      - Account
  /account/verify/resend:
    get:
      consumes:
      - application/json
      description: Resends a verification code to the user's email or phone number.
      produces:
      - application/json
      responses:
        "200":
          description: Ok.
          schema:
            $ref: '#/definitions/resp.Message'
        "400":
          description: Incorrect data
          schema:
            $ref: '#/definitions/resp.JsonError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.JsonError'
        "403":
          description: This resource is forbidden
          schema:
            $ref: '#/definitions/resp.JsonError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/resp.JsonError'
      security:
      - Bearer: []
      summary: Resend verification code
      tags:
      - Account
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
