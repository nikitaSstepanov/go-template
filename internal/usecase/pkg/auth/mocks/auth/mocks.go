// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/pkg/auth/type.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/pkg/auth/type.go -destination=internal/usecase/pkg/auth/mocks/auth/mocks.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	entity "app/internal/entity"
	jwt "app/internal/usecase/pkg/auth/jwt"
	reflect "reflect"
	time "time"

	e "github.com/gosuit/e"
	lec "github.com/gosuit/lec"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtUseCase is a mock of JwtUseCase interface.
type MockJwtUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockJwtUseCaseMockRecorder
	isgomock struct{}
}

// MockJwtUseCaseMockRecorder is the mock recorder for MockJwtUseCase.
type MockJwtUseCaseMockRecorder struct {
	mock *MockJwtUseCase
}

// NewMockJwtUseCase creates a new mock instance.
func NewMockJwtUseCase(ctrl *gomock.Controller) *MockJwtUseCase {
	mock := &MockJwtUseCase{ctrl: ctrl}
	mock.recorder = &MockJwtUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtUseCase) EXPECT() *MockJwtUseCaseMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJwtUseCase) GenerateToken(user *entity.User, expires time.Duration, isRefresh bool) (string, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user, expires, isRefresh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJwtUseCaseMockRecorder) GenerateToken(user, expires, isRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJwtUseCase)(nil).GenerateToken), user, expires, isRefresh)
}

// ValidateToken mocks base method.
func (m *MockJwtUseCase) ValidateToken(jwtString string, isRefresh bool) (*jwt.Claims, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", jwtString, isRefresh)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJwtUseCaseMockRecorder) ValidateToken(jwtString, isRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJwtUseCase)(nil).ValidateToken), jwtString, isRefresh)
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
	isgomock struct{}
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockUserStorage) GetByEmail(ctx lec.Context, email string) (*entity.User, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserStorageMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserStorage)(nil).GetByEmail), ctx, email)
}

// GetById mocks base method.
func (m *MockUserStorage) GetById(ctx lec.Context, id uint64) (*entity.User, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserStorageMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserStorage)(nil).GetById), ctx, id)
}
