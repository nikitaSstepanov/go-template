// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/pkg/user/type.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/pkg/user/type.go -destination=internal/usecase/pkg/user/mocks/user/mocks.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	entity "app/internal/entity"
	reflect "reflect"
	time "time"

	e "github.com/gosuit/e"
	lec "github.com/gosuit/lec"
	gomock "go.uber.org/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
	isgomock struct{}
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStorage) Create(ctx lec.Context, user *entity.User) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserStorageMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStorage)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserStorage) Delete(ctx lec.Context, id uint64) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserStorageMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserStorage)(nil).Delete), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockUserStorage) GetByEmail(ctx lec.Context, email string) (*entity.User, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserStorageMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserStorage)(nil).GetByEmail), ctx, email)
}

// GetById mocks base method.
func (m *MockUserStorage) GetById(ctx lec.Context, id uint64) (*entity.User, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserStorageMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserStorage)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockUserStorage) Update(ctx lec.Context, user *entity.User) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserStorageMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStorage)(nil).Update), ctx, user)
}

// MockCodeStorage is a mock of CodeStorage interface.
type MockCodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCodeStorageMockRecorder
	isgomock struct{}
}

// MockCodeStorageMockRecorder is the mock recorder for MockCodeStorage.
type MockCodeStorageMockRecorder struct {
	mock *MockCodeStorage
}

// NewMockCodeStorage creates a new mock instance.
func NewMockCodeStorage(ctrl *gomock.Controller) *MockCodeStorage {
	mock := &MockCodeStorage{ctrl: ctrl}
	mock.recorder = &MockCodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeStorage) EXPECT() *MockCodeStorageMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCodeStorage) Del(ctx lec.Context, userId uint64) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, userId)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCodeStorageMockRecorder) Del(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCodeStorage)(nil).Del), ctx, userId)
}

// Get mocks base method.
func (m *MockCodeStorage) Get(ctx lec.Context, userId uint64) (*entity.ActivationCode, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userId)
	ret0, _ := ret[0].(*entity.ActivationCode)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCodeStorageMockRecorder) Get(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCodeStorage)(nil).Get), ctx, userId)
}

// Set mocks base method.
func (m *MockCodeStorage) Set(ctx lec.Context, code *entity.ActivationCode) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, code)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCodeStorageMockRecorder) Set(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCodeStorage)(nil).Set), ctx, code)
}

// MockJwtUseCase is a mock of JwtUseCase interface.
type MockJwtUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockJwtUseCaseMockRecorder
	isgomock struct{}
}

// MockJwtUseCaseMockRecorder is the mock recorder for MockJwtUseCase.
type MockJwtUseCaseMockRecorder struct {
	mock *MockJwtUseCase
}

// NewMockJwtUseCase creates a new mock instance.
func NewMockJwtUseCase(ctrl *gomock.Controller) *MockJwtUseCase {
	mock := &MockJwtUseCase{ctrl: ctrl}
	mock.recorder = &MockJwtUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtUseCase) EXPECT() *MockJwtUseCaseMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJwtUseCase) GenerateToken(user *entity.User, expires time.Duration, isRefresh bool) (string, e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user, expires, isRefresh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(e.Error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJwtUseCaseMockRecorder) GenerateToken(user, expires, isRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJwtUseCase)(nil).GenerateToken), user, expires, isRefresh)
}

// MockMailUseCase is a mock of MailUseCase interface.
type MockMailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMailUseCaseMockRecorder
	isgomock struct{}
}

// MockMailUseCaseMockRecorder is the mock recorder for MockMailUseCase.
type MockMailUseCaseMockRecorder struct {
	mock *MockMailUseCase
}

// NewMockMailUseCase creates a new mock instance.
func NewMockMailUseCase(ctrl *gomock.Controller) *MockMailUseCase {
	mock := &MockMailUseCase{ctrl: ctrl}
	mock.recorder = &MockMailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailUseCase) EXPECT() *MockMailUseCaseMockRecorder {
	return m.recorder
}

// SendActivation mocks base method.
func (m *MockMailUseCase) SendActivation(to, code string) e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendActivation", to, code)
	ret0, _ := ret[0].(e.Error)
	return ret0
}

// SendActivation indicates an expected call of SendActivation.
func (mr *MockMailUseCaseMockRecorder) SendActivation(to, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendActivation", reflect.TypeOf((*MockMailUseCase)(nil).SendActivation), to, code)
}
